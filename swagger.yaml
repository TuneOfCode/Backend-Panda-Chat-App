openapi: 3.0.0

schemes:
  - https
  - http

tags:
  - name: auth
    description: authenticate API
  - name: users
    description: users API
  - name: roles
    description: roles API
  - name: conversations
    description: conversations API
  - name: messages
    description: messages API
  - name: friends
    description: friends API
  - name: notifications
    description: notifications API

paths:
  # [POST] auth/signup
  /api/auth/signup:
    post:
      tags:
        - auth
      summary: Register a user
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/requestBody/CreateUserDto'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [POST] auth/login
  /api/auth/login:
    post:
      tags:
        - auth
      summary: Login a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBody/LoginDto'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

  # [POST] auth/logout
  /api/auth/logout:
    post:
      security:
        - bearerAuth: []
      tags:
        - auth
      summary: Logout a user
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

  # [POST] auth/refresh-token
  /api/auth/refresh-token:
    post:
      security:
        - bearerAuth: []
      tags:
        - auth
      summary: Refresh token a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: refresh token of the user
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [GET] users
  /api/users:
    get:
      tags:
        - users
      summary: Find All Users
      parameters:
        - $ref: '#/components/parameters/filter_field'
        - $ref: '#/components/parameters/filter_operator'
        - $ref: '#/components/parameters/filter_value'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

    # [POST] users
    post:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Add new a user [ADMIN]
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/requestBody/CreateUserDto'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [GET] users/id
  /api/users/{id}:
    get:
      tags:
        - users
      summary: Find User By Id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] users/id
    put:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Update User By Id [ADMIN]
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/requestBody/UpdateUserDto'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
    # [DELETE] users/id
    delete:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Delete User By Id [ADMIN]
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [PATCH] users/id/change-password
  /api/users/{id}/change-password:
    patch:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Change Password User By Id
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
                - confirmNewPassword
              properties:
                currentPassword:
                  type: string
                  description: current password of the user
                newPassword:
                  type: string
                  description: new password of the user
                confirmNewPassword:
                  type: string
                  description: confirm new password of the user
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/roles
  /api/roles:
    get:
      security:
        - bearerAuth: []
      tags:
        - roles
      summary: Find All Roles [ADMIN]
      parameters:
        - $ref: '#/components/parameters/filter_field'
        - $ref: '#/components/parameters/filter_operator'
        - $ref: '#/components/parameters/filter_value'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

    post:
      security:
        - bearerAuth: []
      tags:
        - roles
      summary: Add new a role [ADMIN]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: name of the role
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/roles/id
  /api/roles/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - roles
      summary: Find Role By Id [ADMIN]
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    patch:
      security:
        - bearerAuth: []
      tags:
        - roles
      summary: Update Role By Id [ADMIN]
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: name of the role
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # api/roles/{id}/assign
  /api/roles/{id}/assign:
    patch:
      security:
        - bearerAuth: []
      tags:
        - roles
      summary: Assign Role By Id [ADMIN]
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userIds
              properties:
                userIds:
                  type: array
                  description: array user ids of the role
                  items:
                    type: string
                    format: objectId
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # api/roles/{id}/unassign
  /api/roles/{id}/unassign:
    patch:
      security:
        - bearerAuth: []
      tags:
        - roles
      summary: Unassign Role By Id [ADMIN]
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userIds
              properties:
                userIds:
                  type: array
                  description: array user ids of the role
                  items:
                    type: string
                    format: objectId
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/friends
  /api/friends:
    get:
      security:
        - bearerAuth: []
      tags:
        - friends
      summary: Find All Friends
      parameters:
        - $ref: '#/components/parameters/search_friends'
        - $ref: '#/components/parameters/filter_status_friends'
        - $ref: '#/components/parameters/filter_sender_friends'
        - $ref: '#/components/parameters/filter_receiver_friends'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

    post:
      security:
        - bearerAuth: []
      tags:
        - friends
      summary: Add new a friend request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - receiverId
              properties:
                receiverId:
                  type: string
                  format: objectId
                  description: receiver id of the friend request
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/friends/{id}
  /api/friends/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - friends
      summary: Find Friend By Id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    delete:
      security:
        - bearerAuth: []
      tags:
        - friends
      summary: Delete Friend By Id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/friends/{id}/accept
  /api/friends/{id}/accept:
    patch:
      security:
        - bearerAuth: []
      tags:
        - friends
      summary: Accept friend request
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/friends/{id}/reject
  /api/friends/{id}/reject:
    patch:
      security:
        - bearerAuth: []
      tags:
        - friends
      summary: Reject friend request
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/friends/{id}/cancel
  /api/friends/{id}/cancel:
    patch:
      security:
        - bearerAuth: []
      tags:
        - friends
      summary: Cancel friend request
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/friends/{id}/unfriend
  /api/friends/{id}/unfriend:
    patch:
      security:
        - bearerAuth: []
      tags:
        - friends
      summary: Unfriend friend request
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/conversations
  /api/conversations:
    get:
      security:
        - bearerAuth: []
      tags:
        - conversations
      summary: Find all conversations of me
      parameters:
        - $ref: '#/components/parameters/search_conversations'
        - $ref: '#/components/parameters/filter_type_conversations'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

    post:
      security:
        - bearerAuth: []
      tags:
        - conversations
      summary: Add new a conversation
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - memberIds
              properties:
                name:
                  type: string
                  description: name of the conversation
                avatar:
                  type: string
                  description: avatar of the conversation
                  format: binary
                memberIds:
                  type: array
                  description: members of the conversation
                  items:
                    type: string
                    format: objectId
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/conversations/{id}
  /api/conversations/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - conversations
      summary: Find conversation by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    patch:
      security:
        - bearerAuth: []
      tags:
        - conversations
      summary: Update conversation by id
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: name of the conversation
                avatar:
                  type: string
                  description: avatar of the conversation
                  format: binary
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    delete:
      security:
        - bearerAuth: []
      tags:
        - conversations
      summary: Delete conversation by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/conversations/{id}/messages
  /api/conversations/{id}/messages:
    get:
      security:
        - bearerAuth: []
      tags:
        - conversations
      summary: Find all messages in conversation by id
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/search_conversations'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/conversations/{id}/last-message
  /api/conversations/{id}/last-message:
    get:
      security:
        - bearerAuth: []
      tags:
        - conversations
      summary: Find last message in conversation by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/conversations/{id}/add-members
  /api/conversations/{id}/add-members:
    patch:
      security:
        - bearerAuth: []
      tags:
        - conversations
      summary: Add members to conversation by id
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - memberIds
              properties:
                memberIds:
                  type: array
                  description: members of the conversation
                  items:
                    type: string
                    format: objectId
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/conversations/{id}/kick-members
  /api/conversations/{id}/kick-members:
    patch:
      security:
        - bearerAuth: []
      tags:
        - conversations
      summary: Kick members to conversation by id
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - memberIds
              properties:
                memberIds:
                  type: array
                  description: members of the conversation
                  items:
                    type: string
                    format: objectId
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/conversations/{id}/leave
  /api/conversations/{id}/leave:
    patch:
      security:
        - bearerAuth: []
      tags:
        - conversations
      summary: Leave conversation by me
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/messages
  /api/messages:
    get:
      security:
        - bearerAuth: []
      tags:
        - messages
      summary: Find all messages is not readed of me
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'
    post:
      security:
        - bearerAuth: []
      tags:
        - messages
      summary: Create new a message
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - conversationId
              properties:
                conversationId:
                  type: string
                  format: objectId
                  description: conversation id of the message
                text:
                  type: string
                  description: text of the message
                files:
                  type: array
                  description: files of the message
                  items:
                    type: string
                    format: binary
                    description: file of the message
                parentMessageId:
                  type: string
                  format: objectId
                  description: reply message of the message
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/messages/{id}
  /api/messages/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - messages
      summary: Find one message by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    patch:
      security:
        - bearerAuth: []
      tags:
        - messages
      summary: Update one message by id
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: text of the message
                files:
                  type: array
                  description: files of the message
                  items:
                    type: string
                    format: binary
                    description: file of the message
                parentMessageId:
                  type: string
                  format: objectId
                  description: reply message of the message
      responses:
        200:
          description: 'Ok'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
    delete:
      security:
        - bearerAuth: []
      tags:
        - messages
      summary: Delete one message by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'Ok'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/messages/{id}/read
  /api/messages/{id}/read:
    patch:
      security:
        - bearerAuth: []
      tags:
        - messages
      summary: Read message by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'Ok'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/messages/{id}/recall
  /api/messages/{id}/recall:
    patch:
      security:
        - bearerAuth: []
      tags:
        - messages
      summary: Recall message by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'Ok'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/messages/{id}/restore
  /api/messages/{id}/restore:
    patch:
      security:
        - bearerAuth: []
      tags:
        - messages
      summary: Restore message by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'Ok'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        404:
          description: 'Not Found'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # /api/notifications
  /api/notifications:
    get:
      security:
        - bearerAuth: []
      tags:
        - notifications
      summary: Find all notifications of me
      parameters:
        - $ref: '#/components/parameters/filter_type_notifications'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        200:
          description: 'Ok'
        500:
          description: 'Server Error'
    post:
      security:
        - bearerAuth: []
      tags:
        - notifications
      summary: Create new a notification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - receiverId
                - type
                - content
                - thumbnail
              properties:
                receiverId:
                  type: string
                  format: objectId
                  description: receiver id of the notification
                type:
                  type: string
                  description: type of the notification
                content:
                  type: string
                  description: content of the notification
                thumbnail:
                  type: string
                  description: thumbnail of the notification
      responses:
        201:
          description: 'Created'
        500:
          description: 'Server Error'

  # /api/notifications/{id}
  /api/notifications/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - notifications
      summary: Find one notification by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'Ok'
        500:
          description: 'Server Error'
    patch:
      security:
        - bearerAuth: []
      tags:
        - notifications
      summary: Update one notification by id
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                receiverId:
                  type: string
                  format: objectId
                  description: receiver id of the notification
                type:
                  type: string
                  description: type of the notification
                content:
                  type: string
                  description: content of the notification
                thumbnail:
                  type: string
                  description: thumbnail of the notification
      responses:
        200:
          description: 'Ok'
        500:
          description: 'Server Error'
    delete:
      security:
        - bearerAuth: []
      tags:
        - notifications
      summary: Delete one notification by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'Ok'
        500:
          description: 'Server Error'

  # /api/notifications/{id}/read
  /api/notifications/{id}/read:
    patch:
      security:
        - bearerAuth: []
      tags:
        - notifications
      summary: Read a or all notifications of me
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: 'Ok'
        500:
          description: 'Server Error'

# components
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    # Path Id
    id:
      in: path
      name: id
      required: true
      schema:
        type: string
        format: objectId
    # Filter
    filter_field:
      in: query
      name: filter_field
      type: string
      description: field to filter in collections
    filter_operator:
      in: query
      name: filter_operator
      type: string (eq, ne, gt, gte, lt, lte, like)
      description: operator to filter in collections
    filter_value:
      in: query
      name: filter_value
      type: string
      description: value to filter in collections
    # Sort
    sort_field:
      in: query
      name: sort_field
      type: string
      description: field to sort in collections
    sort_type:
      in: query
      name: sort_type
      type: string (asc, desc)
      description: type to sort in collections
    # Paginate
    page:
      in: query
      name: page
      type: number
      description: page to paginate in collections
    per_page:
      in: query
      name: per_page
      type: number
      description: limit to paginate in collections
    # Filter Friends
    search_friends:
      in: query
      name: search
      type: string
      description: search in friends
    filter_status_friends:
      in: query
      name: type
      type: enum
      format: ['pending', 'accepted', 'rejected']
      description: filter type in friends include (pending, accepted, rejected)
    filter_sender_friends:
      in: query
      name: sender
      type: string
      description: filter sender in friends include (me)
    filter_receiver_friends:
      in: query
      name: receiver
      type: string
      description: filter sender in friends include (me)
    # Filter Conversations
    search_conversations:
      in: query
      name: search
      type: string
      description: search in conversations
    filter_type_conversations:
      in: query
      name: type
      type: enum
      format: ['private', 'group']
      description: filter type in conversations include (private, group)
    # Filter Notifications
    filter_type_notifications:
      in: query
      name: type
      type: enum
      format: ['friend_request', 'message', 'system']
      description: filter type in notifications include (friend_request, message, system)

  requestBody:
    # User DTO
    CreateUserDto:
      type: object
      required:
        - firstName
        - lastName
        - email
        - username
        - password
        - confirmPassword
      properties:
        firstName:
          type: string
          description: first name of the user
        lastName:
          type: string
          description: last name of the user
        email:
          type: string
          description: email of the user
        username:
          type: string
          description: username of the user
        password:
          type: string
          description: password of the user
        confirmPassword:
          type: string
          description: confirm password of the user
        avatar:
          type: string
          description: avatar of the user
          format: binary
    UpdateUserDto:
      type: object
      required:
        - firstName
        - lastName
        - email
        - username
        - password
        - confirmPassword
      properties:
        firstName:
          type: string
          description: first name of the user
        lastName:
          type: string
          description: last name of the user
        email:
          type: string
          description: email of the user
        username:
          type: string
          description: username of the user
        phone:
          type: string
          description: phone of the user
        password:
          type: string
          description: password of the user
        avatar:
          type: string
          format: binary
          description: avatar of the user
        address:
          type: string
          description: address of the user
        refreshToken:
          type: string
          description: refresh token of the user
    LoginDto:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: username or email of the user
        password:
          type: string
          description: password of the user

  schemas:
    User:
      type: object
      required:
        - firstName
        - lastName
        - email
        - username
        - password
      properties:
        firstName:
          type: string
          description: first name of the user
        lastName:
          type: string
          description: last name of the user
        email:
          type: string
          description: email of the user
        username:
          type: string
          description: username of the user
        phone:
          type: string
          description: phone of the user
        password:
          type: string
          description: password of the user
        avatar:
          type: string
          description: avatar of the user
        address:
          type: string
          description: address of the user
        refreshToken:
          type: string
          description: refresh token of the user
        roles:
          type: array
          description: roles of the user
          items:
            type: Role
        conversations:
          type: array
          description: conversation of the user
          items:
            type: Conversation

    Role:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: name of the role

    Conversation:
      type: object
      required:
        - name
        - type
        - owner
        - members
      properties:
        name:
          type: string
          description: name of the conversation
        avatar:
          type: string
          description: avatar of the conversation
        type:
          type: enum ['private', 'group']
          description: type of the role
        owner:
          type: User
          description: owner of the role
        members:
          type: array
          description: members of the role
          items:
            type: User

    Message:
      type: object
      required:
        - sender
        - conversation
      properties:
        sender:
          type: User
          description: sender of the message
        conversation:
          type: Conversation
          description: conversation of the message
        text:
          type: string
          description: text of the message
        file:
          type: string
          description: file of the message
        parent:
          type: Message
          description: reply message of the message
        recallAt:
          type: date
          description: recall time of the message

    MessageRecipient:
      type: object
      required:
        - message
        - recipient
      properties:
        message:
          type: Message
          description: message of the recipient
        recipient:
          type: User
          description: recipient of the recipient
        readAt:
          type: date
          description: read time of the recipient

    Friend:
      type: object
      required:
        - sender
        - receiver
      properties:
        sender:
          type: User
          description: sender friend request
        receiver:
          type: User
          description: receiver friend request
        status:
          type: enum ['pending', 'accepted', 'rejected']
          description: status of the friend

    Notification:
      type: object
      required:
        - sender
        - recipient
        - type
        - content
      properties:
        sender:
          type: User
          description: sender of the notification
        recipient:
          type: User
          description: recipient of the notification
        type:
          type: enum ['friend_request', 'message', 'join_group']
          description: type of the notification
        content:
          type: string
          description: message of the notification
        thumbnail:
          type: string
          description: thumbnail of the notification
        readAt:
          type: date
          description: read time of the notification
